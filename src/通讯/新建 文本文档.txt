struct epoll_event event;
    event.events = EPOLLIN;
    event.data.fd = sockfd;
    int eret = epoll_ctl(epfd_01, EPOLL_CTL_ADD, sockfd, &event);
    if(eret<0)
    {
        perror("add error");
    }

    //分别将两个结构体的中的套接字加入监听队列
     //4.接受连接（默认是阻塞）
    struct sockaddr_in clientaddr;
    socklen_t len = sizeof(clientaddr);
    int clientfd1 = accept(player_1.sockfd, (struct sockaddr *)(&clientaddr), &len);
    if(clientfd1 < 0)
    {
        perror("accept");
    }
    //把监听套接字描述符添加到epoll监听队列
    event.events = EPOLLIN;
    event.data.fd = clientfd1;
    eret = epoll_ctl(epfd_01, EPOLL_CTL_ADD, clientfd1, &event);
    if(eret<0)
    {
        perror("add error01");
    }

    //添加第二个用户的套接字
     //4.接受连接（默认是阻塞）
    struct sockaddr_in clientaddr1;
    socklen_t len1 = sizeof(clientaddr1);
    int clientfd2 = accept(player_2.sockfd, (struct sockaddr *)(&clientaddr1), &len1);
    if(clientfd2 < 0)
    {
        perror("accept");
    }
    //把监听套接字描述符添加到epoll监听队列、
    event.events = EPOLLIN;
    event.data.fd = clientfd2;
    int ret = epoll_ctl(epfd_01, EPOLL_CTL_ADD, clientfd2, &event);
    if(ret<0)
    {
        perror("add error02");
    }